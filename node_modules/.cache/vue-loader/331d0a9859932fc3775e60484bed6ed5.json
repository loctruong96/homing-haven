{"remainingRequest":"C:\\Users\\kidab\\csci\\homing-haven\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\kidab\\csci\\homing-haven\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\kidab\\csci\\homing-haven\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\kidab\\csci\\homing-haven\\src\\components\\UserInfo.vue?vue&type=template&id=04a5d2c9&","dependencies":[{"path":"C:\\Users\\kidab\\csci\\homing-haven\\src\\components\\UserInfo.vue","mtime":1583978804706},{"path":"C:\\Users\\kidab\\csci\\homing-haven\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kidab\\csci\\homing-haven\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\kidab\\csci\\homing-haven\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kidab\\csci\\homing-haven\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}